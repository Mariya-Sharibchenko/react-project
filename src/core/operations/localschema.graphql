enum ResponseStatus {
  rejected,
  accepted,
  considering
}

interface Node {
  id: ID!
}

type Student implements Node {
  id: ID!,
  img: String,
  firstName: String!,
  lastName: String!,
  position: String!,
  course: String!,
  bestStudentMark: Boolean!,
  score: Int!,
  diplomaLink: String!,
  schoolRecommendation: String!,
  skills: [String!]!,
  education: Education!,
  aboutStudent: String!,
  contacts: Contacts!,
  showContacts: Boolean!,
}

type Education {
  english: String!,
  formal: FormalEducation!,
  additional: String,
}

type FormalEducation {
  level: String!,
  detailedInfo: String!,
}

type Contacts {
  city: String!,
  tel: String!,
  eMail: String!,
  socialMedia: SocialMedia,
}

type SocialMedia {
  facebook: String,
  instagram: String,
  linkedin: String,
  vk: String,
}

type Company implements Node {
  id: ID!
  name: String!,
  contacts: String!,
  bookmarkedStudents: [String!]!,
}

type Invitation implements Node {
  id: ID!,
  company: Company!,
  student: Student!
  status: ResponseStatus!,
  invitationDate: String!
}

type Query {
  Student(id: ID!): Student!,
  allStudents: [Student!]!,
  Company(id: ID!): Company!,
  allCompanies: [Company!]!,
  allInvitations: [Invitation!]!
}

input UpdateStudentInfoInput {
  aboutStudent: String!
}

input StudentInput {
  id: ID!,
  img: String,
  firstName: String!,
  lastName: String!,
  position: String!,
  course: String!,
  bestStudentMark: Boolean!,
  score: Int!,
  diplomaLink: String!,
  schoolRecommendation: String!,
  skills: [String!]!,
  education: EducationInput!,
  aboutStudent: String!,
  contacts: ContactsInput!,
  showContacts: Boolean!,
}

input EducationInput {
  english: String!,
  formal: FormalEducationInput!,
  additional: String,
}

input FormalEducationInput {
  level: String!,
  detailedInfo: String!,
}

input ContactsInput {
  city: String!,
  tel: String!,
  eMail: String!,
  socialMedia: SocialMediaInput,
}

input SocialMediaInput {
  facebook: String,
  instagram: String,
  linkedin: String,
  vk: String,
}

input CompanyInput {
  id: ID!
  name: String!,
  contacts: String!,
  bookmarkedStudents: [String!]!,
}

type Mutation {
  updateCompany(id: ID!, bookmarkedStudents: [String!]!): Company!
  updateStudent(id: ID!, aboutStudent: UpdateStudentInfoInput!): Student!
  createInvitation(
    company: CompanyInput!
    student: StudentInput!
    status: ResponseStatus!
    invitationDate: String!
  ): Invitation!
}

schema {
  query: Query
  mutation: Mutation
}
